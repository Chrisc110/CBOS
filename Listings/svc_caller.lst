


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             handle_pend,CODE,READONLY
    2 00000000                 GLOBAL           PendSV_Handler
    3 00000000                 EXTERN           set_PSP_new_stackPtr
    4 00000000                 PRESERVE8
    5 00000000         PendSV_Handler
    6 00000000         
    7 00000000         ;setting r0 to the address of PSP
    8 00000000 F3EF 8009       MRS              r0, PSP
    9 00000004         
   10 00000004         ;5. Put R4 through R11 onto the stack, "saving its conte
                       xt"
   11 00000004 E920 0FF0       stmdb            r0!,{r4-r11}
   12 00000008         
   13 00000008         ;since we are saving the PSP in set_PSP_new_stackPtr, 
   14 00000008         ;we are making sure that it is up to date with r0
   15 00000008 F380 8809       MSR              PSP,r0
   16 0000000C         
   17 0000000C         ;calling the c function which does the following:
   18 0000000C         ;1. Save the PSP for next time we want to enter the thre
                       ad
   19 0000000C         ;2. Increment the "current thread" index to the new thre
                       ad we want to run
   20 0000000C         ;3. Set the PSP to whatever it was before when we left t
                       he new thread
   21 0000000C F7FF FFFE       BL               set_PSP_new_stackPtr
   22 00000010         
   23 00000010         ;setting LR which does the important following things:
   24 00000010         ;1. Go back into thread mode
   25 00000010         ;2. Return to the PSP
   26 00000010 F06F 0E02       mov              LR, #0xFFFFFFFD
   27 00000014         
   28 00000014         ;setting r0 to the address of the new thread's PSP
   29 00000014 F3EF 8009       MRS              r0, PSP
   30 00000018         
   31 00000018         
   32 00000018         ;8. Pop R11 through R4, "restoring its context"
   33 00000018 E8B0 0FF0       ldmia            r0!,{r4-r11}
   34 0000001C         
   35 0000001C         ;9. Return from the PendSV handler. The microcontroller 
                       will pop the rest of the registers out for you
   36 0000001C F380 8809       MSR              PSP, r0
   37 00000020         
   38 00000020 4770            BX               LR
   39 00000022         
   40 00000022                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\svc_caller.d -o.\objects\svc_caller.o -I.\RTE\Device\LPC
1768 -I.\RTE\_Target_1 -IC:\Software\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Cor
e\Include -IC:\Software\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.7.0\Device\Include 
--predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 531" --predefin
e="_RTE_ SETA 1" --predefine="LPC175x_6x SETA 1" --predefine="_RTE_ SETA 1" --l
ist=.\listings\svc_caller.lst svc_caller.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

PendSV_Handler 00000000

Symbol: PendSV_Handler
   Definitions
      At line 5 in file svc_caller.s
   Uses
      At line 2 in file svc_caller.s
Comment: PendSV_Handler used once
handle_pend 00000000

Symbol: handle_pend
   Definitions
      At line 1 in file svc_caller.s
   Uses
      None
Comment: handle_pend unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

set_PSP_new_stackPtr 00000000

Symbol: set_PSP_new_stackPtr
   Definitions
      At line 3 in file svc_caller.s
   Uses
      At line 21 in file svc_caller.s
Comment: set_PSP_new_stackPtr used once
1 symbol
337 symbols in table
