


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             handle_pend,CODE,READONLY
    2 00000000                 GLOBAL           PendSV_Handler
    3 00000000                 EXTERN           set_PSP_new_stackPtr
    4 00000000                 PRESERVE8
    5 00000000         PendSV_Handler
    6 00000000         
    7 00000000         ;write the magic value of 0xFFFFFFFD (seven F's then a D
                       ) to LR
    8 00000000 F06F 0E02       mov              LR, #0xFFFFFFFD
    9 00000004 F3EF 8009       MRS              r0, PSP
   10 00000008         ;5. Put R4 through R11 onto the stack
   11 00000008 E920 0FF0       stmdb            r0!,{r4-r11}
   12 0000000C         ;6. Save the thread’s stack pointer-- done in #3 in main
                       .c function
   13 0000000C         
   14 0000000C         ;7. Switch PSP so that it points to the new thread’s sta
                       ck pointer 
   15 0000000C         ;call function to switch r0 to new function stack pointe
                       r
   16 0000000C F7FF FFFE       BL               set_PSP_new_stackPtr
   17 00000010 F06F 0E02       mov              LR, #0xFFFFFFFD
   18 00000014         
   19 00000014 F3EF 8009       MRS              r0, PSP
   20 00000018         
   21 00000018         ;8. Pop R11 through R4 (notice the reverse order)set r0 
                       to new psp in order to access
   22 00000018 E8B0 0FF0       ldmia            r0!,{r4-r11}
   23 0000001C         
   24 0000001C         ;9. Return from the PendSV handler. The microcontroller 
                       will pop the rest of the registers out for you
   25 0000001C F380 8809       MSR              PSP, r0
   26 00000020         
   27 00000020         
   28 00000020         
   29 00000020         ;return - Note that, since LR has the magic value, the m
                       icrocontroller reloads it from the 
   30 00000020         ;stack frame it pushed on at the start of this call. Fin
                       ding that value and aligning your stack
   31 00000020         ;will 100% cause you grief while you try to do a context
                        switch, but how to do that depends
   32 00000020         ;so much on your design that we can't tell you how!
   33 00000020 4770            BX               LR
   34 00000022         
   35 00000022                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\svc_caller.d -o.\objects\svc_caller.o -I.\RTE\Device\LPC
1768 -I.\RTE\_Target_1 -IC:\Software\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Cor
e\Include -IC:\Software\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.7.0\Device\Include 
--predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 531" --predefin
e="_RTE_ SETA 1" --predefine="LPC175x_6x SETA 1" --predefine="_RTE_ SETA 1" --l
ist=.\listings\svc_caller.lst svc_caller.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

PendSV_Handler 00000000

Symbol: PendSV_Handler
   Definitions
      At line 5 in file svc_caller.s
   Uses
      At line 2 in file svc_caller.s
Comment: PendSV_Handler used once
handle_pend 00000000

Symbol: handle_pend
   Definitions
      At line 1 in file svc_caller.s
   Uses
      None
Comment: handle_pend unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

set_PSP_new_stackPtr 00000000

Symbol: set_PSP_new_stackPtr
   Definitions
      At line 3 in file svc_caller.s
   Uses
      At line 16 in file svc_caller.s
Comment: set_PSP_new_stackPtr used once
1 symbol
337 symbols in table
